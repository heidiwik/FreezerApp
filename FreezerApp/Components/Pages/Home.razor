@page "/"
@rendermode InteractiveServer

@using FreezerApp.Models
@using FreezerApp.Services

@inject TableService TableService
@inject IConfiguration Configuration
@inject ILogger<Home> Logger

<PageTitle>Freezer app</PageTitle>

<h1>Freezer app</h1>

@if (groupedItems == null)
{
    <p>Loading...</p>
}
else if (groupedItems.Count == 0)
{
    <p>No items found.</p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th>Box</th>
                <th>Locations</th>
                <th>Stored</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groupedItems)
            {
                <tr class="@(group.TotalQuantity > 1 ? "table-group-row clickable" : "") @(expandedGroups.Contains(group.Name) ? "table-active border-bottom-row" : "") "
                    @onclick="() => { if (group.TotalQuantity > 1) ToggleGroup(group.Name); }"
                    style="cursor:@(group.TotalQuantity > 1 ? "pointer" : "default")">
                    <td>
                        <b>@group.Name </b>
                        @if (group.TotalQuantity > 1)
                        {
                            <span>
                                <i class="bi @(expandedGroups.Contains(group.Name) ? "bi-caret-up-fill" : "bi-caret-down-fill") bi-icon"></i>
                            </span>
                        }
                    </td>
                    <td>@string.Join(", ", group.Boxes)</td>
                    <td>@string.Join(", ", group.Locations)</td>
                    <td>@group.EarliestStoreDate.ToString("dd.MM.yy H:mm")</td>
                    <td>@group.TotalQuantity</td>
                    <td>
                        <button class="btn btn-danger btn-sm"
                                @onclick:stopPropagation="true"
                                @onclick="() => ShowConfirm(GetDeleteMessage(group), () => DeleteAll(group.Name))">
                            @(group.TotalQuantity > 1 ? "Delete All" : "Delete")
                        </button>
                    </td>
                </tr>
                @if (expandedGroups.Contains(group.Name))
                {
                    var items = freezerItems!.Where(x => x.Name == group.Name).OrderBy(x => x.StoreDate).ToList();
                    @foreach (var item in items)
                    {
                        <tr class="table-active">
                            <td colspan="1"></td>
                            <td>@(item.BoxId?.ToString() ?? "-")</td>
                            <td>@(item.Location ?? "-")</td>
                            <td>@item.StoreDate.ToString("dd.MM.yy H:mm")</td>
                            <td colspan="1"></td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="async (e) => await DeleteSingle(item.Id)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
}

@if (showConfirm){
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    <p>@confirmMessage</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showConfirm = false">Cancel</button>
                    <button class="btn btn-danger" @onclick="OnConfirm">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<FreezerItem>? freezerItems;
    private List<GroupedItem>? groupedItems;

    private HashSet<string> expandedGroups = new();

    private void ToggleGroup(string groupName)
    {
        if (!expandedGroups.Add(groupName))
            expandedGroups.Remove(groupName);
    }

    private bool showConfirm = false;
    private string? confirmMessage;
    private Func<Task>? confirmAction;

    private void ShowConfirm(string message, Func<Task> action)
    {
        confirmMessage = message;
        confirmAction = action;
        showConfirm = true;
    }

    private async Task OnConfirm()
    {
        showConfirm = false;
        if (confirmAction != null)
            await confirmAction.Invoke();
    }

    protected override async Task OnInitializedAsync()
    {
        freezerItems = await TableService.GetFreezerItemsAsync(Configuration, Logger);
        GroupItems();
    }

    private string GetDeleteMessage(GroupedItem group)
    {
        return group.TotalQuantity > 1
            ? $"Delete all items named '{group.Name}'?"
            : $"Delete '{group.Name}'?";
    }

    private void GroupItems()
    {
        groupedItems = freezerItems
            ?.GroupBy(i => i.Name)
            .Select(g => new GroupedItem
                {
                    Name = g.Key,
                    TotalQuantity = g.Sum(x => x.Quantity),
                    Boxes = g.Select(x => x.BoxId?.ToString() ?? "-").Distinct().ToList(),
                    Locations = g.Select(x => x.Location ?? "-").Distinct().ToList(),
                    EarliestStoreDate = g.Min(x => x.StoreDate),
                    Ids = g.Select(x => x.Id).ToList()
                })
            .OrderBy(g => g.Name)
            .ToList();
    }

    private async Task DeleteAll(string name)
    {
        if (freezerItems == null) return;
        var itemsToDelete = freezerItems.Where(x => x.Name == name).ToList();
        foreach (var item in itemsToDelete)
        {
            await TableService.DeleteFreezerItemAsync(item.Id, Configuration, Logger);
        }
        freezerItems = await TableService.GetFreezerItemsAsync(Configuration, Logger);
        GroupItems();
        StateHasChanged();
    }

    private async Task DeleteSingle(Guid id)
    {
        await TableService.DeleteFreezerItemAsync(id, Configuration, Logger);
        freezerItems = await TableService.GetFreezerItemsAsync(Configuration, Logger);
        GroupItems();
        StateHasChanged();
    }

    private class GroupedItem
    {
        public string Name { get; set; } = string.Empty;
        public int TotalQuantity { get; set; }
        public List<string> Boxes { get; set; } = new();
        public List<string> Locations { get; set; } = new();
        public DateTime EarliestStoreDate { get; set; }
        public List<Guid> Ids { get; set; } = new();
    }
}
