@page "/"
@rendermode InteractiveServer

@using FreezerApp.Models
@using FreezerApp.Services

@inject TableService TableService
@inject IConfiguration Configuration
@inject ILogger<Home> Logger

       @inject IJSRuntime JSRuntime


<PageTitle>Freezer app</PageTitle>
@* 
<h1>Freezer app</h1> *@

@if (groupedItems == null)
{
    <p>Loading...</p>
}
else if (groupedItems.Count == 0)
{
    <p>No items found.</p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th>Quantity</th>
                <th>Box</th>
                <th>Compartment</th>
                <th>Stored</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groupedItems)
            {
                bool canExpand = group.Ids.Count > 1 && group.Boxes.Any(x => !string.IsNullOrWhiteSpace(x));

                var itemId = group.Ids.FirstOrDefault();

                bool isEditing = (!canExpand && editingItemId == itemId);

                <tr class="@(canExpand ? "table-group-row clickable" : "") @(expandedGroups.Contains(group.Name) ? "table-active border-bottom-row" : "")"
                    @onclick="() => { if (canExpand) ToggleGroup(group.Name); else StartEditing(group); }"
                    style=@($"cursor:{(canExpand ? "pointer" : "default")}")>
                    <td>
                        @if (isEditing)
                        {
                            <InputText class="form-control" @bind-Value="editingItem.Name" @onblur="SaveEditingItem" />
                        }
                        else
                        {
                            <b>@group.Name</b>
                            @if (canExpand)
                            {
                                <span><i class="bi @(expandedGroups.Contains(group.Name) ? "bi-caret-up-fill" : "bi-caret-down-fill") bi-icon"></i></span>
                            }
                        }
                    </td>
                    <td>
                        @if (isEditing && group.Boxes.Count == 0)
                        {
                            <InputNumber class="form-control" @bind-Value="editingItem.Quantity" @onblur="SaveEditingItem" />
                        }
                        else
                        {
                            @group.TotalQuantity
                        }
                    </td>
                    <td>
                        @if (isEditing)
                        {
                            <InputText class="form-control" @bind-Value="boxInput" @onblur="SaveEditingItem" />
                        }
                        else
                        {
                            @foreach (var box in group.Boxes)
                            {
                                <span class="badge rounded-pill bg-primary">@box</span>
                            }
                        }
                    </td>
                    <td>
                        @if (isEditing)
                        {
                            <InputText class="form-control" @bind-Value="editingItem.Location" @onblur="SaveEditingItem" />
                        }
                        else
                        {
                            @foreach (var compartment in group.Locations)
                            {
                                <span class="badge bg-success rounded-pill">@compartment</span>
                            }
                        }
                    </td>
                    <td>
                        @if (isEditing)
                        {
                            <InputText class="form-control" @bind-Value="storeDateInput" @onblur="SaveEditingItem" />
                        }
                        else
                        {
                            @group.EarliestStoreDate.ToString("dd.MM.yy H:mm")
                        }
                    </td>
                    <td>
                        @if (isEditing && !canExpand)
                        {
                            <button class="btn btn-danger btn-sm"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => ShowConfirm(GetDeleteMessage(group.Name), async () => await DeleteSingle(itemId))">
                                @(group.TotalQuantity > 1 ? "Delete one" : "Delete")
                            </button>
                        }
                    </td>
                </tr>

                @if (expandedGroups.Contains(group.Name))
                {
                    var items = freezerItems!.Where(x => x.Name == group.Name).OrderBy(x => x.StoreDate).ToList();
                    @foreach (var item in items)
                    {
                        <tr class="table-active">
                            <td colspan="1"></td>
                            <td>@(item.Quantity > 1 ? item.Quantity : "")</td>
                            <td>@(item.BoxId?.ToString() ?? "")</td>
                            <td>@(item.Location ?? "")</td>
                            <td>@item.StoreDate.ToString("dd.MM.yy H:mm")</td>
                            <td>
                                <button class="btn btn-danger btn-sm"
                                        @onclick:stopPropagation="true"
                                        @onclick="() => ShowConfirm(GetDeleteMessage(item.Name), async () => await DeleteSingle(item.Id))">
                                    @(item.Quantity > 1 ? "Delete one" : "Delete")
                                </button>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
}

@if (showConfirm)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    <p>@confirmMessage</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showConfirm = false">Cancel</button>
                    <button class="btn btn-danger" @onclick="OnConfirm">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<FreezerItem>? freezerItems;
    private List<GroupedItem>? groupedItems;

    private HashSet<string> expandedGroups = new();

    private void ToggleGroup(string groupName)
    {
        if (!expandedGroups.Add(groupName))
            expandedGroups.Remove(groupName);
    }

    private bool showConfirm = false;
    private string? confirmMessage;
    private Func<Task>? confirmAction;

    private void ShowConfirm(string message, Func<Task> action)
    {
        confirmMessage = message;
        confirmAction = action;
        showConfirm = true;
    }

    private async Task OnConfirm()
    {
        showConfirm = false;
        if (confirmAction != null)
            await confirmAction.Invoke();
    }

    protected override async Task OnInitializedAsync()
    {
        freezerItems = await TableService.GetFreezerItemsAsync(Configuration, Logger);

        if (freezerItems == null)
            return;

        GroupItems();
    }

    private string GetDeleteMessage(string name)
    {
        return $"Delete {name}?";

        // return group.TotalQuantity > 1
        //     ? $"Delete first item of '{group.Name}'?"
        //     : $"Delete '{group.Name}'?";
    }

    private void GroupItems()
    {
        groupedItems = freezerItems
            ?.GroupBy(i => i.Name)
            .Select(g => new GroupedItem
                {
                    Name = g.Key,
                    TotalQuantity = g.Sum(x => x.Quantity),
                    Boxes = g.Select(x => x.BoxId?.ToString() ?? "").Distinct().ToList(),
                    Locations = g.Select(x => x.Location ?? "").Distinct().ToList(),
                    EarliestStoreDate = g.Min(x => x.StoreDate),
                    Ids = g.Select(x => x.Id).ToList()
                })
            .OrderBy(g => g.Name)
            .ToList();
    }

    private async Task DeleteFirst(string name)
    {
        if (freezerItems == null) return;
        var firstItem = freezerItems.Where(x => x.Name == name).OrderBy(x => x.StoreDate).FirstOrDefault();
        if (firstItem != null)
        {
            await TableService.DeleteFreezerItemAsync(firstItem.Id, Configuration, Logger);
            freezerItems = await TableService.GetFreezerItemsAsync(Configuration, Logger);
            GroupItems();
            StateHasChanged();
        }
    }

    // if the item has quantity > 1, decrease the quantity by 1
    // else item is single item, delete it
    private async Task DeleteSingle(Guid id)
    {
        var item = freezerItems?.FirstOrDefault(x => x.Id == id);

        if (item != null)
        {
            var deleteSingleRow = item.Quantity == 1;

            if (deleteSingleRow)
            {
                await DeleteFirst(item.Name);
            }
            else
            {
                item.Quantity--;

                await TableService.UpdateFreezerItemAsync(item, Configuration, Logger);

                freezerItems = await TableService.GetFreezerItemsAsync(Configuration, Logger);
                GroupItems();
                StateHasChanged();
            }
        }
    }

    private Guid? editingItemId = null;
    private FreezerItem? editingItem = null;
    private string boxInput = string.Empty;
    private string storeDateInput = string.Empty;

    private void StartEditing(GroupedItem group)
    {
        // Only allow editing if not in edit mode and row is not expandable.
        if (editingItemId != null) return;
        var id = group.Ids.FirstOrDefault();
        var item = freezerItems?.FirstOrDefault(x => x.Id == id);
        if (item != null)
        {
            editingItemId = id;
            // Create a clone of the item for editing so that changes are not applied immediately.
            editingItem = new FreezerItem
                {
                    Id = item.Id,
                    Name = item.Name,
                    Quantity = item.Quantity,
                    BoxId = item.BoxId,
                    Location = item.Location,
                    StoreDate = item.StoreDate
                };
            boxInput = editingItem.BoxId?.ToString() ?? "";
            storeDateInput = editingItem.StoreDate.ToString("d.M.yyyy HH:mm");
            StateHasChanged();
        }
    }

    private async Task SaveEditingItem()
    {
        if (editingItem == null) return;

        if (int.TryParse(boxInput, out int box))
            editingItem.BoxId = box;
        else
            editingItem.BoxId = null;

        // Parse the store date.
        if (DateTime.TryParseExact(storeDateInput, "d.M.yyyy HH:mm", null, System.Globalization.DateTimeStyles.None, out var dt))
            editingItem.StoreDate = dt;

        await TableService.UpdateFreezerItemAsync(editingItem, Configuration, Logger);
        freezerItems = await TableService.GetFreezerItemsAsync(Configuration, Logger);
        GroupItems();
        editingItemId = null;
        editingItem = null;

        // Blur the active element to force focus out
        await JSRuntime.InvokeVoidAsync("document.activeElement.blur");

        StateHasChanged();
    }



    private class GroupedItem
    {
        public string Name { get; set; } = string.Empty;
        public int TotalQuantity { get; set; }
        public List<string> Boxes { get; set; } = new();
        public List<string> Locations { get; set; } = new();
        public DateTime EarliestStoreDate { get; set; }
        public List<Guid> Ids { get; set; } = new();
    }
}
