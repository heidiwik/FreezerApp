@page "/add-item"
@rendermode InteractiveServer

@using FreezerApp.Models
@using FreezerApp.Services
@inject TableService TableService
@inject IConfiguration Configuration
@inject ILogger<AddItem> Logger
@inject NavigationManager Navigation

<h3>Add new item</h3>

<EditForm Model="newItem" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Name:</label>
        <InputText class="form-control" @bind-Value="newItem.Name" />
    </div>
    <div class="mb-3">
        <label>Quantity:</label>
        <InputNumber class="form-control" @bind-Value="newItem.Quantity" />
    </div>
    <div class="mb-3">
        <label>Box:</label>
        <InputNumber class="form-control" @bind-Value="newItem.BoxId" />
    </div>
    <div class="mb-3">
        <label>Location:</label>
        <InputSelect class="form-control" @bind-Value="newItem.Location">
            @foreach (var loc in Locations)
            {
                <option value="@loc">@loc</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Store Date:</label>
        <input class="form-control"
               @bind="storeDateString"
               @onblur="OnStoreDateBlur" />
    </div>
    <button type="submit" class="btn btn-primary">Add Item</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {

    private static readonly string[] Locations = new[]
    {
        "Compartment 1",
        "Compartment 2",
        "Compartment 3"
    };

    private FreezerItem newItem = new()
        {
            Id = Guid.NewGuid(),
            StoreDate = DateTime.Now,
            Name = string.Empty,
            Location = Locations[0] // Default selection
        };

    private string? message;

    private async Task HandleValidSubmit()
    {
        try
        {
            newItem.Id = Guid.NewGuid(); // Ensure unique ID
            await TableService.AddFreezerItemAsync(newItem, Configuration, Logger);
            message = "Item added!";
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding item");
            message = "Error adding item.";
        }
    }

    private string storeDateString
    {
        get => newItem.StoreDate.ToString("d.M.yyyy HH:mm");
        set
        {
            if (DateTime.TryParseExact(value, "d.M.yyyy HH:mm", null, System.Globalization.DateTimeStyles.None, out var dt))
            {
                newItem.StoreDate = DateTime.SpecifyKind(dt, DateTimeKind.Utc);
            }
        }
    }

    // Ensure value is parsed on blur (in case user pastes or types in the field)
    private void OnStoreDateBlur(FocusEventArgs e)
    {
        storeDateString = storeDateString;
    }
}