@page "/add-item"
@rendermode InteractiveServer

@using FreezerApp.Models
@using FreezerApp.Services
@inject TableService TableService
@inject IConfiguration Configuration
@inject ILogger<AddItem> Logger
@inject NavigationManager Navigation

<h3>Add new item</h3>

<EditForm Model="newItem" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Name:</label>
        <InputText class="form-control" @bind-Value="newItem.Name" />
    </div>
    <div class="mb-3">
        <label>Quantity:</label>
        <InputNumber class="form-control"
                     @bind-Value="newItem.Quantity"
                     disabled="@IsBoxProvided" />
    </div>
    <div class="mb-3">
        <label>Box(es):</label>
        <InputText class="form-control" @bind-Value="BoxNumbersInput" placeholder="e.g. 1,2,3" />
        <div class="form-text">Enter one or more box numbers, separated by commas.</div>
    </div>
    <div class="mb-3">
        <label>Location:</label>
        <InputSelect class="form-control" @bind-Value="newItem.Location">
            @foreach (var loc in Locations)
            {
                <option value="@loc">@loc</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Store Date:</label>
        <input class="form-control"
               @bind="storeDateString"
               @onblur="OnStoreDateBlur" />
    </div>
    <button type="submit" class="btn btn-primary">Add Item</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {
    private static readonly string[] Locations = new[]
    {
        "Compartment 1",
        "Compartment 2",
        "Compartment 3"
    };

    private FreezerItem newItem = new()
        {
            Id = Guid.NewGuid(),
            StoreDate = DateTime.Now,
            Name = string.Empty,
            Location = Locations[0],
            Quantity = 1
        };

    // Only this property, no field
    private string BoxNumbersInput
    {
        get => boxNumbersInputBacking;
        set
        {
            boxNumbersInputBacking = value;
            if (IsBoxProvided)
            {
                newItem.Quantity = 1;
            }
        }
    }
    private string boxNumbersInputBacking = string.Empty;

    private string? message;

    private bool IsBoxProvided => !string.IsNullOrWhiteSpace(BoxNumbersInput);

    private async Task HandleValidSubmit()
    {
        try
        {
            // Parse box numbers from input
            var boxNumbers = BoxNumbersInput
                .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                .Select(s => int.TryParse(s, out var n) ? n : (int?)null)
                .Where(n => n.HasValue)
                .Select(n => n.Value)
                .Distinct()
                .ToList();

            if (boxNumbers.Count > 0)
            {
                // If boxes are provided, add one item per box, quantity always 1
                foreach (var box in boxNumbers)
                {
                    var item = new FreezerItem
                        {
                            Id = Guid.NewGuid(),
                            Name = newItem.Name,
                            Quantity = 1,
                            BoxId = box,
                            Location = newItem.Location,
                            StoreDate = newItem.StoreDate
                        };
                    await TableService.AddFreezerItemAsync(item, Configuration, Logger);
                }
            }
            else
            {
                // If no box is provided, add a single item with user-defined quantity and no BoxId
                var item = new FreezerItem
                    {
                        Id = Guid.NewGuid(),
                        Name = newItem.Name,
                        Quantity = newItem.Quantity,
                        BoxId = null,
                        Location = newItem.Location,
                        StoreDate = newItem.StoreDate
                    };
                await TableService.AddFreezerItemAsync(item, Configuration, Logger);
            }

            message = "Item(s) added!";
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding item(s)");
            message = "Error adding item(s).";
        }
    }

    private string storeDateString
    {
        get => newItem.StoreDate.ToString("d.M.yyyy HH:mm");
        set
        {
            if (DateTime.TryParseExact(value, "d.M.yyyy HH:mm", null, System.Globalization.DateTimeStyles.None, out var dt))
            {
                newItem.StoreDate = DateTime.SpecifyKind(dt, DateTimeKind.Utc);
            }
        }
    }

    private void OnStoreDateBlur(FocusEventArgs e)
    {
        storeDateString = storeDateString;
    }
}